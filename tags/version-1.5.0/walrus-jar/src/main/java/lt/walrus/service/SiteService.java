package lt.walrus.service;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;

import lt.walrus.dao.IWalrusDao;
import lt.walrus.dao.InitHelperDao;
import lt.walrus.model.Rubric;
import lt.walrus.model.Site;
import lt.walrus.model.Sites;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

@Service("siteService")
public class SiteService implements Serializable, CRUDService<Site> {
	private static final long serialVersionUID = -2750545557731333224L;

	private IWalrusDao dao;
	protected org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(this.getClass());

	/**
	 * All sites managed by Walrus
	 */
	@Autowired
	Sites sites;
	/**
	 * Site initialization helper for persistency
	 */
	@Autowired
	InitHelperDao initHelper;

	/**
	 * Add a site to Walrus
	 * 
	 * @param site
	 */
	@Override
	public void add(Site site) {
		site.getRootRubric().setOrderno(0);
		dao.save(site);
		// load site from db to get initialized ids
		Site site2 = dao.getSite(site.getHost(), site.getLanguage());
		initHelper.fixRootrubricOrderno(site2.getRootRubric());
		sites.put(site.getHost() + site.getLanguage(), site2);
	}

	@Override
	public void delete(Site site) {
		sites.remove(site.getHost() + site.getLanguage());
		dao.deleteSite(site);
	}

	/**
	 * Returns a site. A site is characterized by host name and language. i.e.
	 * host and language compose a unique locator for a site.
	 * 
	 * @param host
	 * @param language
	 * @return site for specified host and language
	 */
	public Site getSite(String host, String language) {
		return getSite(host, language, false);
	}

	/**
	 * Returns a site. If site is not found, it can be created for given host
	 * and language using prototype site defined in dummyData.xml
	 * 
	 * @param host
	 * @param language
	 * @param createSite
	 *            if true - site will be created when not found
	 * @return
	 */
	public Site getSite(String host, String language, boolean createSite) {
		if (sites.isEmpty()) {
			loadAllSites();
		}
	
		Site site = getSites().get(host, language);
		if (null != site) {
			return site;
		} else {
			site = getDao().getSite(host, language);
			if (null == site) {
				if (createSite) {
					initSite(host, language);
				} else {
					return null;
				}
			} else {
				getSites().put(host + language, site);
			}
			return getSites().get(host, language);
		}
	}

	@Override
	public Site get(long id) {
		return sites.getSiteById(id);
	}

	private Sites getSites() {
		return sites;
	}

	/**
	 * @return all sites managed by walrus
	 */
	public Collection<Site> getAllSites() {
		return sites.getSites();
	}

	/**
	 * Get all sites for given language
	 * 
	 * @param language
	 * @return all sites for given language
	 */
	public List<Site> getSites(String language) {
		return sites.getList(language);
	}

	private void initSite(String host, String language) {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("conf/site.xml");
		Site sitePrototype = (Site) context.getBean("sitePrototype");
	
		if (null == sitePrototype) {
			sitePrototype = new Site();
			sitePrototype.setRootRubric(new Rubric("ROOT - AUTOGENERATED"));
		}
	
		sitePrototype.getRootRubric().initChildrenOrderNos();
		sitePrototype.getRootRubric().setOrderno(0);
		sitePrototype.setLanguage(language);
		sitePrototype.setHost(host);
	
		if (null == sitePrototype.getTitle()) {
			sitePrototype.setTitle(host);
		}
	
		int index = 0;
		if (!getSites().getList(language).isEmpty()) {
			index = getSites().getList(language).get(getSites().getList(language).size() - 1).getIndex() + 1;
		}
		sitePrototype.setIndex(index);
	
		add(sitePrototype);
	
		initHelper.createAdminIfNeeded();
		logger.info("WARNING! Walrus did not find previous site in database. NEW SITE HAS BEEN CREATED. Your new site ID is: " + sitePrototype.getId());
	}

	private void loadAllSites() {
		List<Site> allSites = getDao().getAllSites();
		if (null != allSites) {
			for (Site site : allSites) {
				sites.put(site.getHost() + site.getLanguage(), site);
				loadSiteAliases(site);
			}
		}
	}

	private void loadSiteAliases(Site site) {
		if (site.hasAliases()) {
			String[] aliases = site.getHostAliases().split(",");
			for (String alias : aliases) {
				if (StringUtils.hasText(alias)) {
					sites.put(alias.trim() + site.getLanguage(), site);
				}
			}
		}
	}

	public void setSites(Sites sites) {
		this.sites = sites;
	}

	public void setDao(IWalrusDao dao) {
		this.dao = dao;
	}

	public IWalrusDao getDao() {
		return dao;
	}

	public InitHelperDao getInitHelper() {
		return initHelper;
	}

	public void setInitHelper(InitHelperDao initHelper) {
		this.initHelper = initHelper;
	}

	public void save(Site site) {
		dao.save(site);
	}
}
